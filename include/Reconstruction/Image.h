#ifndef __IMAGE_H__
#define __IMAGE_H__

#include <string>
#include <vector>
#include <unordered_map>

#include <opencv2/opencv.hpp>

#include "Common/Types.h"

namespace MonocularSfM
{

class Image
{

public:
    Image(){}
    Image(const image_t image_id) : image_id_(image_id){}
    Image(const image_t image_id, const std::string name): image_id_(image_id), name_(name) {}

    ////////////////////////////////////////////////////////////////////////////////
    // 获取设置图像Id
    ////////////////////////////////////////////////////////////////////////////////
    image_t ImageId() const;
    void SetImageId(const image_t image_id);



    ////////////////////////////////////////////////////////////////////////////////
    // 获取设置图像名字
    ////////////////////////////////////////////////////////////////////////////////
    const std::string& Name() const;
    std::string& Name();
    void SetName(const std::string& name);






    ////////////////////////////////////////////////////////////////////////////////
    // 获取设置图像旋转矩阵
    ////////////////////////////////////////////////////////////////////////////////
    const cv::Mat& R() const;
    cv::Mat& R();
    void SetR(const cv::Mat& R);



    ////////////////////////////////////////////////////////////////////////////////
    // 获取设置图像平移向量
    ////////////////////////////////////////////////////////////////////////////////
    const cv::Mat& t() const;
    cv::Mat& t();
    void SetT(const cv::Mat& t);


    ////////////////////////////////////////////////////////////////////////////////
    // 获取设置图像的第point2D_idx个特征点坐标
    ////////////////////////////////////////////////////////////////////////////////
    const cv::Point2f& Point2D(const point2D_t point2D_idx) const;
    cv::Point2f& Point2D(const point2D_t point2D_idx);



    ////////////////////////////////////////////////////////////////////////////////
    // 获取设置图像的所有特征点坐标
    ////////////////////////////////////////////////////////////////////////////////
    const std::vector<cv::Point2f>& Point2Ds() const;
    std::vector<cv::Point2f>& Point2Ds();



    ////////////////////////////////////////////////////////////////////////////////
    // 图像特征点的数量
    ////////////////////////////////////////////////////////////////////////////////
    point2D_t NumPoints2D() const;


    ////////////////////////////////////////////////////////////////////////////////
    // 获取设置图像特征点的颜色
    ////////////////////////////////////////////////////////////////////////////////
    const cv::Vec3b& Color(const point2D_t point2D_idx) const;
    cv::Vec3b& Color(const point2D_t point2D_idx);



    ////////////////////////////////////////////////////////////////////////////////
    // 获取设置图像所有特征点的颜色
    ////////////////////////////////////////////////////////////////////////////////
    const std::vector<cv::Vec3b>& Colors() const;
    std::vector<cv::Vec3b>& Colors();




    ////////////////////////////////////////////////////////////////////////////////
    // 获取设置图像2D特征点的3D对应
    ////////////////////////////////////////////////////////////////////////////////
    void SetPoint2D3DCorrespondence(const point2D_t point2D_idx, const point2D_t point3D_idx);
    void DisablePoint2D3DCorrespondence(const point2D_t point2D_idx);
    bool IsPoint2DHasPoint3D(const point2D_t point2D_idx) const;
    point3D_t GetPoint2D3DCorrespondence(const point2D_t point2D_idx);
    size_t NumPoint2D3DCorrespondence() const;


    ////////////////////////////////////////////////////////////////////////////////
    // 能不能看到3D点
    ////////////////////////////////////////////////////////////////////////////////
    void SetPointVisable(const point2D_t& point2D_idx);
    void DisablePointVisable(const point2D_t& point2D_idx);
    size_t NumVisablePoint3D() const;


private:
    // 需要在Mapper类中设置
    image_t image_id_;
    std::string name_;

    // 需要在Mapper类中设置
    cv::Mat R_;
    cv::Mat t_;

    // 需要在Mapper类中设置
    std::vector<cv::Point2f> point2D_;
    std::vector<cv::Vec3b> colors_;

    // 需要在Mapper类中设置
    // 哪个2D点对应哪个3D点
    std::unordered_map<point2D_t, point3D_t> point2D_3D_corrs_;

    std::unordered_map<point2D_t, bool> is_visable_point3D_;






};

} // namespace MonocularSfM

#endif // __IMAGE_H__
